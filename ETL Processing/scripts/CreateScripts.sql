--PUBLIC AREA--
-- Table: public.GroceryData

-- DROP TABLE IF EXISTS public."GroceryData";

CREATE TABLE IF NOT EXISTS public."GroceryData"
(
    transaction_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    marketplace character varying COLLATE pg_catalog."default",
    customer_id integer NOT NULL,
    review_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_parent integer,
    product_title character varying COLLATE pg_catalog."default",
    product_category character varying COLLATE pg_catalog."default",
    star_rating integer,
    helpful_votes integer,
    total_votes integer,
    vine boolean,
    verified_purchase boolean,
    review_headline character varying COLLATE pg_catalog."default",
    review_body character varying COLLATE pg_catalog."default",
    review_date date,
    CONSTRAINT sales_pkey PRIMARY KEY (transaction_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."GroceryData"
    OWNER to postgres;
	
	
--STAGING AREA--
-- Table: staging.reviews

-- DROP TABLE IF EXISTS staging.reviews;

CREATE TABLE IF NOT EXISTS staging.reviews
(
    review_pk integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    review_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_id character varying COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    marketplace character varying COLLATE pg_catalog."default",
    star_rating integer,
    total_votes integer,
    vine boolean,
    verified_purchase boolean,
    review_headline character varying COLLATE pg_catalog."default",
    review_body character varying COLLATE pg_catalog."default",
    review_date date,
    CONSTRAINT reviews_pkey PRIMARY KEY (review_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS staging.reviews
    OWNER to postgres;
-- Table: staging.products
-----------------------------------------------------------------------------------------------------------------------------
-- DROP TABLE IF EXISTS staging.products;

CREATE TABLE IF NOT EXISTS staging.products
(
    product_pk integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_title character varying COLLATE pg_catalog."default",
    product_category character varying COLLATE pg_catalog."default",
    product_parent integer,
    CONSTRAINT products_pkey PRIMARY KEY (product_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS staging.products
    OWNER to postgres;
------------------------------------------------------------------------------------------------------
-- Table: staging.customers

-- DROP TABLE IF EXISTS staging.customers;

CREATE TABLE IF NOT EXISTS staging.customers
(
    customer_pk integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer NOT NULL,
    product_id character varying COLLATE pg_catalog."default",
    helpful_votes integer,
    vine boolean,
    CONSTRAINT customers_pkey PRIMARY KEY (customer_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS staging.customers
    OWNER to postgres;
	
	
--CORE AREA --
-- Table: staging.customers

-- DROP TABLE IF EXISTS staging.customers;

CREATE TABLE IF NOT EXISTS core.customers
(
    customer_pk integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer NOT NULL,
    product_id character varying COLLATE pg_catalog."default",
    helpful_votes integer,
    vine boolean,
    CONSTRAINT customers_pkey PRIMARY KEY (customer_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS core.customers
    OWNER to postgres;
-- Table: core.products

-- DROP TABLE IF EXISTS core.products;

CREATE TABLE IF NOT EXISTS core.products
(
    product_pk integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_title character varying COLLATE pg_catalog."default",
    product_category character varying COLLATE pg_catalog."default",
    product_parent integer,
    total_reviews integer,
    good_reviews integer,
    bad_reviews integer,
    CONSTRAINT products_pkey PRIMARY KEY (product_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS core.products
    OWNER to postgres;
CREATE INDEX IF NOT EXISTS idx_product_id
    ON core.products USING btree
    (product_id COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;

-- DROP TABLE IF EXISTS staging.reviews;

CREATE TABLE IF NOT EXISTS core.reviews
(
    review_pk integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    review_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_id character varying COLLATE pg_catalog."default" NOT NULL,
    product_fk integer NOT NULL,
    customer_id integer NOT NULL,
    customer_fk integer NOT NULL,
    marketplace character varying COLLATE pg_catalog."default",
    star_rating integer,
    total_votes integer,
    vine boolean,
    verified_purchase boolean,
    review_headline character varying COLLATE pg_catalog."default",
    review_body character varying COLLATE pg_catalog."default",
    review_date date,
    CONSTRAINT reviews_pkey PRIMARY KEY (review_pk)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS core.reviews
    OWNER to postgres;
	
--CREATE INDEX FOR CORE TABLE--
CREATE INDEX idx_customer_id ON core.customers (customer_id);
CREATE INDEX idx_review_id ON core.reviews (review_id);
CREATE INDEX idx_product_id ON core.products (product_id);

